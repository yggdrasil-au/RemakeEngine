# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Win,Linux,Mac .NET Test, Build, Release.yml

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]     # create a release when you push a tag like v1.2.3
  workflow_dispatch: {}

permissions:
  contents: write     # needed for gh release create

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    if: startsWith(github.ref, 'refs/tags/')
    name: Build & Test (${{ matrix.os }} | ${{ matrix.configuration }})
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-14]
        configuration: [Debug, Release]
    runs-on: ${{ matrix.os }}
    env:
      Solution_Name: RemakeEngine.sln
      ForceTFM: net8.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK 8.x (with NuGet cache)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true
          cache-dependency-path: |
            **/*.sln
            **/*.csproj
            **/Directory.Packages.props
            **/nuget.config

      - name: Restore
        shell: pwsh
        run: dotnet restore "$env:Solution_Name" -p:TargetFramework=$env:ForceTFM

      - name: Build
        shell: pwsh
        run: dotnet build "$env:Solution_Name" -c "${{ matrix.configuration }}" --no-restore -p:TargetFramework=$env:ForceTFM

      - name: Discover tests (cross-platform)
        id: discover_tests
        shell: pwsh
        run: |
          $tests = Get-ChildItem -Recurse -Filter *Tests.csproj | Select-Object -Expand FullName
          if ($tests) {
            "found=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            $tests | ForEach-Object { $_ }
          } else {
            "found=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "No test projects found (skipping dotnet test)."
          }

      - name: Test
        if: steps.discover_tests.outputs.found == 'true'
        shell: pwsh
        run: dotnet test "$env:Solution_Name" -c "${{ matrix.configuration }}" --no-build -p:TargetFramework=$env:ForceTFM --verbosity normal

  release_matrix:
    name: Release build (${{ matrix.rid }} on ${{ matrix.os }})
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
          - os: windows-latest
            rid: win-arm64
          - os: windows-latest
            rid: linux-x64
          - os: windows-latest
            rid: linux-arm64
          - os: windows-latest
            rid: osx-x64
          - os: windows-latest
            rid: osx-arm64
    runs-on: ${{ matrix.os }}
    env:
      Solution_Name: RemakeEngine.sln
      App_Project: EngineNet/EngineNet.csproj
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup .NET SDK 8.x (with NuGet cache)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true
          cache-dependency-path: |
            **/*.sln
            **/*.csproj
            **/Directory.Packages.props
            **/nuget.config

      # Optional: Sign (Windows only) using Base64_Encoded_Pfx & Pfx_Key secrets
      # - name: Decode code signing cert
      #   if: matrix.rid == 'win-x64' || matrix.rid == 'win-arm64'
      #   shell: pwsh
      #   run: |
      #     $bytes = [Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
      #     [IO.File]::WriteAllBytes("signingcert.pfx", $bytes)
      #
      # - name: Import cert (Windows)
      #   if: matrix.rid == 'win-x64' || matrix.rid == 'win-arm64'
      #   shell: pwsh
      #   run: |
      #     $pwd = ConvertTo-SecureString "${{ secrets.Pfx_Key }}" -AsPlainText -Force
      #     Import-PfxCertificate -FilePath signingcert.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $pwd | Out-Null

      - name: Publish (${{ matrix.rid }})
        shell: pwsh
        run: >
          dotnet publish "$env:App_Project"
          -c Release -f net8.0 -r ${{ matrix.rid }} --self-contained true
          -o out/${{ matrix.rid }}
          -p:PublishSingleFile=true
          -p:IncludeNativeLibrariesForSelfExtract=true
          -p:EnableCompressionInSingleFile=true
          -p:DebugType=None -p:DebugSymbols=false

      - name: Package zip (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $zipName = "EngineNet-${{ matrix.rid }}-${{ github.ref_name }}.zip"
          Compress-Archive -Path "out/${{ matrix.rid }}/*" -DestinationPath $zipName
          "ZIP_NAME=$zipName" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 7

  publish_release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: release_matrix
    runs-on: ubuntu-latest
    permissions: { contents: write }
    steps:
      - uses: actions/checkout@v4       # <-- this line makes .git available
        with: { fetch-depth: 0 }

      - uses: actions/download-artifact@v4
        with: { path: dist }

      - run: ls -laR dist

      - name: Create release and upload assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # works with PAT too
        run: |
          set -euo pipefail
          tag="${{ github.ref_name }}"
          mkdir -p upload
          find dist -type f -name '*.zip' -exec cp {} upload/ \;
          gh release create "$tag" upload/*.zip \
            --title "$tag" \
            --notes "Automated multi-platform release for $tag"

