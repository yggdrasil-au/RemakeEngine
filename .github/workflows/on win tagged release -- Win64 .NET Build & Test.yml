# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: on win tagged release -- Win64 .NET Build & Test.yml

on:
  push:
    #branches: [ "main" ]  # only run when tag release is pushed
    tags: [ "win-v*" ]     # create a release when you push a tag like win-v1.2.3
  workflow_dispatch: {}    # allow manual runs

jobs:
  build:
    if: startsWith(github.ref, 'refs/tags/')    # only on tags
    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, Release]
    runs-on: windows-latest
    env:
      Solution_Name: RemakeEngine.sln
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        shell: pwsh
        run: dotnet restore $env:Solution_Name

      - name: Build
        shell: pwsh
        run: dotnet build $env:Solution_Name --configuration $env:Configuration --no-restore
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Discover tests
        id: discover_tests
        shell: pwsh
        run: |
          $tests = Get-ChildItem -Recurse -Filter *Tests.csproj | Select-Object -ExpandProperty FullName
          if ($tests -and $tests.Count -gt 0) {
            "found=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            # optional: log discovered projects
            $tests -join "`n" | Write-Host
          } else {
            "found=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "No test projects found (skipping dotnet test)."
          }

      - name: Test
        if: steps.discover_tests.outputs.found == 'true'
        shell: pwsh
        run: dotnet test $env:Solution_Name --configuration $env:Configuration --no-build --verbosity normal
        env:
          Configuration: ${{ matrix.configuration }}
  release:
    if: startsWith(github.ref, 'refs/tags/')    # only on tags
    needs: build
    runs-on: windows-latest
    env:
      Solution_Name: RemakeEngine.sln
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-dotnet@v4
        with: { dotnet-version: 8.0.x }

      # Publish a Release build (win-x64); tweak RID/self-contained to taste
      - name: Publish
        shell: pwsh
        run: dotnet publish EngineNet\EngineNet.csproj -v:d -c Release -f net8.0 -r win-x64 --self-contained true -o out/win-x64 -p:PublishSingleFile=true

      - name: Zip artifact
        shell: pwsh
        run: Compress-Archive -Path out\win-x64\* -DestinationPath RemakeEngineCore-win-x64.zip

      - name: Create GitHub Release and upload artifact
        env:
          GITHUB_TOKEN: ${{ secrets.SUPERSECRET_TOKEN }}
        shell: pwsh
        run: |
          gh release create "${{ github.ref_name }}" RemakeEngineCore-win-x64.zip `
            --title "${{ github.ref_name }}" `
            --notes "Automated release for ${{ github.ref_name }}"

